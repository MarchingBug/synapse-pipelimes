{
	"name": "NYC - Meet - Final",
	"properties": {
		"folder": {
			"name": "NYC DOE Google Meet"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "NotebookPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/20e228e4-63c7-480a-a860-4b61e9623727/resourceGroups/EDU-US-DevPoc/providers/Microsoft.Synapse/workspaces/educsademo/bigDataPools/NotebookPool",
				"name": "NotebookPool",
				"type": "Spark",
				"endpoint": "https://educsademo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/NotebookPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"import pandas as pd\r\n",
					"from pyspark.sql.functions import explode, col\r\n",
					"\r\n",
					"spark.conf.set(\"spark.sql.execution.arrow.enabled\", \"true\")"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"> Note: You can add a Month, Year parameter to the Notebook and parse the path accordingly to read only the folders you need"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def flattenfiles():\r\n",
					"    try:\r\n",
					"\r\n",
					"        #use the path you need here, if you leave the file name empty it will read all the files on the directory\r\n",
					"        df = spark.read.json('abfss://nycdoe@edupocdatalake.dfs.core.windows.net/*.json', multiLine=True)\r\n",
					"\r\n",
					"        #flatten events nesting\r\n",
					"        events_struct = df.select(\"etag\",explode(\"events\").alias(\"events\"))\r\n",
					"        #now extract all fields as one\r\n",
					"        events = events_struct.select(\"etag\",\"events.*\")\r\n",
					"\r\n",
					"\r\n",
					"        #flatten paramenters nesting\r\n",
					"        parameters_struct = events.select(\"etag\",\"name\",explode(\"parameters\").alias(\"parameters\"))\r\n",
					"        parameters_struct  = parameters_struct.withColumnRenamed(\"name\",\"eventname\")\r\n",
					"\r\n",
					"        parameters = parameters_struct.select(\"etag\",\"eventname\",\"parameters.*\")\r\n",
					"\r\n",
					"        ####### Note #################\r\n",
					"        # Parse the directory of your file here\r\n",
					"        ##############################\r\n",
					"        \r\n",
					"        filename = \"abfss://nycdoe@edupocdatalake.dfs.core.windows.net/processed/googleMeet.json\"           \r\n",
					"        parameters.write.json(filename)\r\n",
					"\r\n",
					"    except:\r\n",
					"        pass\r\n",
					"\r\n",
					""
				],
				"attachments": null,
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"flattenfiles()"
				],
				"attachments": null,
				"execution_count": 9
			}
		]
	}
}