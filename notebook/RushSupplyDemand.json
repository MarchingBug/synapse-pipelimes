{
	"name": "RushSupplyDemand",
	"properties": {
		"folder": {
			"name": "Miscellaneous"
		},
		"nbformat": 0,
		"nbformat_minor": 0,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "469bdbaf-10a8-40e9-ac29-628be2c8944a"
					}
				},
				"source": [
					"#Just import the data from the githubrepository\n",
					"import pandas as pd\n",
					"import warnings\n",
					"warnings.filterwarnings('ignore')\n",
					"import re\n",
					"import sys\n",
					"import datetime\n",
					"#from tabulate import tabulate\n",
					"import IPython.display as display\n",
					"\n",
					"JH_DATA_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/'\n",
					"dates = []\n",
					"\n",
					"today = pd.Timestamp('today')\n",
					"today = '{:%m-%d-%Y}'.format(today)  \n",
					"\n",
					"start_date = pd.to_datetime('3-22-2020',format='%m-%d-%Y')\n",
					"start_date = start_date.strftime('%m-%d-%Y')\n",
					"print(start_date)\n",
					"    \n",
					"dates = pd.date_range(start='3-22-2020', end=today, freq='d')\n",
					"dates = pd.to_datetime(dates, format='%m-%d-%Y')\n",
					"dates = dates.strftime('%m-%d-%Y').tolist()\n",
					"\n",
					"for date in dates:  \n",
					"  fname = JH_DATA_URL + date + '.csv'   \n",
					" \n",
					"  try:    \n",
					"    df = pd.read_csv(fname)   \n",
					"      \n",
					"    if date == start_date:\n",
					"      print('the final')\n",
					"      final_df = df   \n",
					"    else:\n",
					"      final_df.append(df)\n",
					"  except:\n",
					"    continue\n",
					"     \n",
					"final_df   \n",
					""
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "7418cf0b-eb27-433b-b515-d0635813e812"
					}
				},
				"source": [
					"cleanedDf = spark.createDataFrame(final_df)\n",
					"cleanedDf.show()\n",
					"cleanedDf.write.format(\"jdbc\").option(\"mode\",\"SaveMode.Overwrite\").option(\"url\", \"jdbc:sqlserver://eduusdevpoc.database.windows.net:1433\").option(\"driver\", \"com.microsoft.sqlserver.jdbc.SQLServerDriver\").option(\"database\",\"AnonimizeData\").option(\"dbtable\", \"CovId19\").option(\"user\", \"mainuser\").option(\"password\", \"#Welcome2018#\").save()  \n",
					"\n",
					""
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "6cd81c2d-ce02-45c2-b91f-512cfaa96355"
					}
				},
				"source": [
					"%sh\n",
					"/databricks/python/bin/pip install --upgrade pip\n",
					"pip install --upgrade requests\n",
					"pip install --upgrade pandas"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "84fb18e8-a45a-4378-807b-beb24fff1948"
					}
				},
				"source": [
					"#import ipywidgets as widgets\n",
					"#from scipy.stats import binom\n",
					"import matplotlib.pyplot as plt\n",
					"import pandas as pd\n",
					"import csv\n",
					"import numpy as np\n",
					"import datetime\n",
					"\n",
					"import re\n",
					"import warnings\n",
					"from IPython.display import HTML, display\n",
					"import sys\n",
					"from scipy.optimize import curve_fit\n",
					"from scipy import stats\n",
					"from scipy.stats import binom\n",
					"\n",
					"import base64\n",
					"warnings.filterwarnings('ignore')\n",
					"%matplotlib inline\n",
					"#plt.ioff()\n",
					"\n",
					"%config InlineBackend.figure_format = 'svg'\n",
					"\n",
					"Forecasted_cases_df_for_download = []"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "c3f78199-3340-4706-9540-0b4007255512"
					}
				},
				"source": [
					"def logistic(x, a, b, c):\n",
					"    return a / (np.exp(-c * x**3) + b)\n",
					"\n",
					"def obs_pred_rsquare(obs, pred):\n",
					"    return 1 - sum((obs - pred) ** 2) / sum((obs - np.mean(obs)) ** 2)\n",
					"\n",
					"\n",
					"def get_logistic(obs_x, obs_y, ForecastDays):\n",
					"\n",
					"    obs_x = np.array(obs_x)\n",
					"    for i, val in enumerate(obs_y):\n",
					"        if val == 0:\n",
					"            try:\n",
					"                obs_y[i] = obs_y[i-1]\n",
					"            except:\n",
					"                pass\n",
					"    \n",
					"    obs_y = np.array(obs_y)\n",
					"    \n",
					"    try:\n",
					"        popt, pcov = curve_fit(logistic, obs_x, obs_y)\n",
					"        pred_y = logistic(obs_x, *popt)\n",
					"        forecasted_x = np.array(list(range(max(obs_x) + ForecastDays)))\n",
					"        forecasted_y = logistic(forecasted_x, *popt)\n",
					"        \n",
					"    except:\n",
					"        print('Logistic failed to fit. Using 3rd degree polynomial.')\n",
					"        forecasted_y, forecasted_x, pred_y = get_polynomial(obs_x, obs_y, ForecastDays)\n",
					"        \n",
					"    return forecasted_y, forecasted_x, pred_y\n",
					"\n",
					"\n",
					"\n",
					"def get_exponential(obs_x, obs_y, ForecastDays):\n",
					"    \n",
					"    obs_x = np.array(obs_x)\n",
					"    \n",
					"    for i, val in enumerate(obs_y):\n",
					"        if val == 0:\n",
					"            try:\n",
					"                obs_y[i] = obs_y[i-1]\n",
					"            except:\n",
					"                pass       \n",
					"    \n",
					"    slope, intercept, r_value, p_value, std_err = stats.linregress(obs_x, np.log(obs_y))\n",
					"    obs_y = np.array(obs_y)\n",
					"    \n",
					"    pred_y = np.exp(intercept + slope*obs_x)\n",
					"    forecasted_x = np.array(list(range(max(obs_x) + ForecastDays)))\n",
					"    forecasted_y = np.exp(intercept + slope*forecasted_x)\n",
					"    \n",
					"    return forecasted_y, forecasted_x, pred_y\n",
					"        \n",
					"\n",
					"\n",
					"def get_polynomial(obs_x, obs_y, ForecastDays):\n",
					"    \n",
					"    obs_x = np.array(obs_x)\n",
					"    for i, val in enumerate(obs_y):\n",
					"        if val == 0:\n",
					"            try:\n",
					"                obs_y[i] = obs_y[i-1]\n",
					"            except:\n",
					"                pass       \n",
					"    \n",
					"    obs_y = np.array(obs_y)\n",
					"    forecasted_y = np.zeros(len(obs_y))\n",
					"    try:\n",
					"        z = np.polyfit(obs_x, obs_y, 2)\n",
					"        p = np.poly1d(z)\n",
					"        pred_y = p(obs_x)\n",
					"            \n",
					"        forecasted_x = np.array(list(range(max(obs_x) + ForecastDays)))\n",
					"        forecasted_y = p(forecasted_x)\n",
					"    except:\n",
					"        pass\n",
					"    \n",
					"    return forecasted_y, forecasted_x, pred_y\n",
					"\n",
					"\n",
					"\n",
					"def fit_curve(obs_x, obs_y, model, df_sub, ForecastDays):\n",
					"\n",
					"    obs_x = list(range(len(obs_y)))\n",
					"    obs_x = np.array(obs_x)\n",
					"    obs_y = np.array(obs_y)\n",
					"    \n",
					"    best_loc = str()\n",
					"    \n",
					"    if model == 'logistic':\n",
					"        forecasted_y, forecasted_x, pred_y = get_logistic(obs_x, obs_y, ForecastDays)\n",
					"        obs_pred_r2 = obs_pred_rsquare(obs_y, pred_y)\n",
					"    elif model == 'exponential':\n",
					"        forecasted_y, forecasted_x, pred_y = get_exponential(obs_x, obs_y, ForecastDays)\n",
					"        obs_pred_r2 = obs_pred_rsquare(obs_y, pred_y)\n",
					"    elif model == 'polynomial':\n",
					"        forecasted_y, forecasted_x, pred_y = get_polynomial(obs_x, obs_y, ForecastDays)\n",
					"        obs_pred_r2 = obs_pred_rsquare(obs_y, pred_y)\n",
					"        \n",
					"    return obs_pred_r2, model, best_loc, obs_x, pred_y, forecasted_x, forecasted_y"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "91e41d2b-e547-4576-bb5d-996c8b444f96"
					}
				},
				"source": [
					"            \n",
					"    def _get_fit(df, model, focal_loc, per_loc, per_admit, per_cc, LOS_cc, LOS_nc, per_vent, log_scl,\n",
					"                        ppe_GLOVE_SURGICAL, ppe_GLOVE_EXAM_NITRILE, ppe_GLOVE_GLOVE_EXAM_VINYL,\n",
					"                        ppe_MASK_FACE_PROCEDURE_ANTI_FOG, ppe_MASK_PROCEDURE_FLUID_RESISTANT, \n",
					"                        ppe_GOWN_ISOLATION_XLARGE_YELLOW, ppe_MASK_SURGICAL_ANTI_FOG_W_FILM,\n",
					"                        ppe_SHIELD_FACE_FULL_ANTI_FOG, ppe_RESPIRATOR_PARTICULATE_FILTER_REG,\n",
					"                        forecastDays):\n",
					"        \n",
					"        global Forecasted_cases_df_for_download\n",
					"        ForecastDays = int(forecastDays)+int(1) #int(ForecastDays+1)\n",
					"        \n",
					"        fig = plt.figure(figsize=(11, 17))\n",
					"        ax = plt.subplot2grid((6, 4), (0, 0), colspan=2, rowspan=2)\n",
					"        \n",
					"        \n",
					"        df_sub = df[df['type'] == 'Confirmed']\n",
					"        df_sub = df_sub[df_sub['Province/State'] == focal_loc]\n",
					"        df_sub = df_sub.loc[:, (df_sub != 0).any(axis=0)]\n",
					"        yi = list(df_sub)\n",
					"        \n",
					"        clrs =  ['mistyrose', 'pink', 'lightcoral', 'salmon', 'red']\n",
					"        clrs2 = ['powderblue', 'lightskyblue', 'cornflowerblue', 'dodgerblue', 'blue']\n",
					"        \n",
					"        for i, j in enumerate([-4,-3,-2,-1, 0]):\n",
					"            if j == 0:\n",
					"                DATES = yi[6:]\n",
					"                focal = df_sub.iloc[0,6:].values\n",
					"            else:\n",
					"                DATES = yi[6:j]\n",
					"                focal = df_sub.iloc[0,6:j].values\n",
					"            \n",
					"            y = []\n",
					"            dates = []\n",
					"            for ii, val in enumerate(focal):\n",
					"                if len(y) > 0 or val > 0:\n",
					"                    y.append(val)\n",
					"                    dates.append(DATES[ii])\n",
					"\n",
					"            x = list(range(len(y)))\n",
					"\n",
					"            obs_pred_r2_G, model_G, loc_G, obs_x_G, pred_y_G, forecasted_x_G, forecasted_y_G = fit_curve(x, y, model, df_sub, ForecastDays)\n",
					"            obs_y_G = np.array(list(y))\n",
					"\n",
					"            if obs_pred_r2_G < 0:\n",
					"                obs_pred_r2_G = 0.0\n",
					"\n",
					"            y = np.array(y)\n",
					"            y[y < 0] = 0\n",
					"            pred_y_G = np.array(pred_y_G)\n",
					"            pred_y_G[pred_y_G < 0] = 0\n",
					"\n",
					"            forecasted_y_G = np.array(forecasted_y_G)\n",
					"            forecasted_y_G[forecasted_y_G < 0] = 0\n",
					"            forecast_vals = np.copy(forecasted_y_G)\n",
					"\n",
					"            numdays = len(forecasted_x_G)\n",
					"            latest_date = pd.to_datetime(dates[-1])\n",
					"            first_date = pd.to_datetime(dates[0])\n",
					"\n",
					"            future_date = latest_date + datetime.timedelta(days = ForecastDays-1)\n",
					"            fdates = pd.date_range(start=first_date, end=future_date)\n",
					"            fdates = fdates.strftime('%m/%d')\n",
					"            \n",
					"            do = -j\n",
					"            if do == 0:\n",
					"                label='Current forecast'\n",
					"                lw = 3\n",
					"            else:\n",
					"                label = str(do)+' day old forecast'\n",
					"                lw = 3\n",
					"            \n",
					"            plt.plot(fdates, forecasted_y_G, c=clrs[i], linewidth=lw, label=label)\n",
					"            \n",
					"            latest_date = pd.to_datetime(dates[-1])\n",
					"            first_date = pd.to_datetime(dates[0])\n",
					"            dates = pd.date_range(start=first_date, end=latest_date)\n",
					"            dates = dates.strftime('%m/%d')\n",
					"            plt.plot(dates, pred_y_G, c=clrs2[i], linewidth=lw)\n",
					"            plt.scatter(dates, y, c='0.2', s=100, alpha=0.8, linewidths=0.1)\n",
					"            \n",
					"            \n",
					"        forecast_vals = forecast_vals.tolist()\n",
					"\n",
					"        new_cases = []\n",
					"        for i, val in enumerate(forecast_vals):\n",
					"            if i > 0:\n",
					"                new_cases.append(forecast_vals[i] - forecast_vals[i-1])\n",
					"            if i == 0:\n",
					"                new_cases.append(forecast_vals[i])\n",
					"\n",
					"\n",
					"        leg = ax.legend(handlelength=0, handletextpad=0, fancybox=False,\n",
					"                        loc='best', frameon=False, fontsize=14)\n",
					"\n",
					"        for line,text in zip(leg.get_lines(), leg.get_texts()):\n",
					"            text.set_color(line.get_color())\n",
					"\n",
					"        for item in leg.legendHandles: \n",
					"            item.set_visible(False)\n",
					"\n",
					"        plt.xticks(rotation=35, ha='center')\n",
					"        plt.xlabel('Date', fontsize=14, fontweight='bold')\n",
					"        plt.ylabel('Confirmed cases', fontsize=14, fontweight='bold')\n",
					"        \n",
					"        if log_scl == True:\n",
					"            plt.yscale('log')\n",
					"\n",
					"        if len(forecasted_x_G) < 10:\n",
					"            i = 1\n",
					"        elif len(forecasted_x_G) < 20:\n",
					"            i = 4\n",
					"        elif len(forecasted_x_G) < 40:\n",
					"            i = 6\n",
					"        else:\n",
					"            i = 8\n",
					"\n",
					"        for label in ax.xaxis.get_ticklabels()[::i]:\n",
					"            label.set_visible(False)\n",
					"\n",
					"        ax = plt.gca()\n",
					"        temp = ax.xaxis.get_ticklabels()\n",
					"        temp = list(set(temp) - set(temp[::i]))\n",
					"        for label in temp:\n",
					"            label.set_visible(False)\n",
					"            \n",
					"        plt.title('Model fitting, current ' + r'$r^{2}$' + ' = ' + str(np.round(obs_pred_r2_G, 2)), fontsize = 16, fontweight = 'bold')\n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        ax = plt.subplot2grid((6, 4), (0, 2), colspan=2, rowspan=2)\n",
					"        ax.axis('off')\n",
					"        #ax.axis('tight')\n",
					"\n",
					"        loc = str(focal_loc)\n",
					"        if len(loc) > 12:\n",
					"            loc = loc[:12]\n",
					"            loc = loc + '...'\n",
					"\n",
					"        col_labels = ['Cumulative', 'New', 'Your hospital', 'Admitted']\n",
					"\n",
					"        row_labels = fdates.tolist()\n",
					"        new_cases = np.round(new_cases, 1)\n",
					"        \n",
					"        \n",
					"        row_labels = row_labels[-(ForecastDays):]\n",
					"        new_cases2 = new_cases[ -(ForecastDays):]\n",
					"        sub_f = forecasted_y_G[ -(ForecastDays):]\n",
					"\n",
					"        table_vals = []\n",
					"        cclr_vals = []\n",
					"        rclr_vals = []\n",
					"        \n",
					"        Forecasted_cases_df_for_download = pd.DataFrame(columns = ['date'] + col_labels)\n",
					"        for i in range(len(row_labels)):\n",
					"\n",
					"            one_percent = float(0.01)\n",
					"            val = new_cases2[i]\n",
					"            cell = [int(np.round(sub_f[i])), \n",
					"                    int(np.round(val)), \n",
					"                    int(np.round(val * (float(per_loc) * one_percent))),\n",
					"                    int(np.round((one_percent * float(per_admit)) * val * (float(per_loc) * one_percent)))]\n",
					"            \n",
					"            df_row = [row_labels[i]]\n",
					"            df_row.extend(cell)\n",
					"            \n",
					"            #print(df_row)\n",
					"            #sys.exit()\n",
					"            \n",
					"            labs = ['date'] + col_labels\n",
					"            temp = pd.DataFrame([df_row], columns=labs)\n",
					"            #sys.exit()\n",
					"            Forecasted_cases_df_for_download = pd.concat([Forecasted_cases_df_for_download, temp])\n",
					"            \n",
					"            \n",
					"            if i == 0:\n",
					"                rclr = '0.8'\n",
					"                cclr = ['0.8', '0.8', '0.8', '0.8']\n",
					"            else:\n",
					"                rclr = 'w'\n",
					"                cclr = ['w', 'w', 'w', 'w']\n",
					"            table_vals.append(cell)\n",
					"            cclr_vals.append(cclr)\n",
					"            rclr_vals.append(rclr)\n",
					"\n",
					"        ncol = 4\n",
					"        the_table = plt.table(cellText=table_vals,\n",
					"                        colWidths=[0.26] * ncol,\n",
					"                        rowLabels=row_labels,\n",
					"                        colLabels=col_labels,\n",
					"                        cellLoc='center',\n",
					"                        loc='upper center',\n",
					"                        cellColours=cclr_vals,\n",
					"                        rowColours =rclr_vals)\n",
					"        the_table.auto_set_font_size(False)\n",
					"        the_table.set_fontsize(10)\n",
					"        the_table.scale(1, 1.32)\n",
					"        plt.title('Forecasted cases for '+ loc, fontsize = 16, fontweight = 'bold')\n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        ax = plt.subplot2grid((6, 4), (2, 0), colspan=2, rowspan=2)\n",
					"        \n",
					"        #### Construct arrays for critical care and non-critical care patients\n",
					"        cc = (one_percent * float(per_cc)) * (one_percent * float(per_admit)) * (one_percent * float(per_loc)) * np.array(new_cases)\n",
					"        cc = cc.tolist()\n",
					"\n",
					"        \n",
					"        nc = (1 - (one_percent * float(per_cc))) * (one_percent * float(per_admit) ) * (one_percent * float(per_loc)) * np.array(new_cases)\n",
					"        nc = nc.tolist()\n",
					"        \n",
					"        # LOS for non critical care = 5 days\n",
					"        # LOS for critical care = 10 days\n",
					"        p = float(0.5)\n",
					"        n_cc = float(LOS_cc)*2\n",
					"        n_nc = float(LOS_nc)*2\n",
					"        \n",
					"        rv_nc = binom(n_nc, p)\n",
					"        p_nc = rv_nc.cdf(np.array(range(1, len(fdates)+1)))\n",
					"        \n",
					"        rv_cc = binom(n_cc, p)\n",
					"        p_cc = rv_cc.cdf(np.array(range(1, len(fdates)+1)))\n",
					"        \n",
					"        LOScc = np.zeros(len(fdates))\n",
					"        LOScc[0] = new_cases[0] * (one_percent * float(per_cc)) * (one_percent * float(per_admit)) * (one_percent * float(per_loc))\n",
					"        LOSnc = np.zeros(len(fdates))\n",
					"        LOSnc[0] =  new_cases[0] * (1-(one_percent * float(per_cc))) * (one_percent * float(per_admit)) * (one_percent * float(per_loc))\n",
					"        \n",
					"        \n",
					"        total_nc = []\n",
					"        total_cc = []\n",
					"        \n",
					"        \n",
					"        for i, day in enumerate(fdates):\n",
					"            LOScc = LOScc * (1 - p_cc)\n",
					"            LOSnc = LOSnc * (1 - p_nc)\n",
					"            \n",
					"            LOScc = np.roll(LOScc, shift=1)\n",
					"            LOSnc = np.roll(LOSnc, shift=1)\n",
					"            \n",
					"            LOScc[0] = new_cases[i] * (one_percent * float(per_cc)) * (one_percent * float(per_admit)) * (one_percent * float(per_loc))\n",
					"            LOSnc[0] = new_cases[i] * (1 - (one_percent * float(per_cc))) * (one_percent * float(per_admit)) * (one_percent * float(per_loc))\n",
					"    \n",
					"            total_nc.append(np.sum(LOSnc))\n",
					"            total_cc.append(np.sum(LOScc))\n",
					"            #print(day, '  :  ', np.round(LOScc, 0), '  :  ', sum(np.round(LOScc, 0)), '\\n')\n",
					"            \n",
					"        \n",
					"        plt.plot(fdates, total_cc, c='Crimson', label='Critical care', linewidth=3)\n",
					"        plt.plot(fdates, total_nc, c='0.3', label='Non-critical care', linewidth=3)\n",
					"        plt.title('Forecasted census', fontsize = 16, fontweight = 'bold')\n",
					"        if log_scl == True:\n",
					"            plt.yscale('log')\n",
					"        \n",
					"        for label in ax.xaxis.get_ticklabels()[::8]:\n",
					"            label.set_visible(False)\n",
					"\n",
					"        ax = plt.gca()\n",
					"        temp = ax.xaxis.get_ticklabels()\n",
					"        temp = list(set(temp) - set(temp[::8]))\n",
					"        for label in temp:\n",
					"            label.set_visible(False)\n",
					"            \n",
					"        leg = ax.legend(handlelength=0, handletextpad=0, fancybox=False,\n",
					"                        loc='best', frameon=False, fontsize=14)\n",
					"\n",
					"        for line,text in zip(leg.get_lines(), leg.get_texts()):\n",
					"            text.set_color(line.get_color())\n",
					"\n",
					"        for item in leg.legendHandles: \n",
					"            item.set_visible(False)\n",
					"        \n",
					"        plt.ylabel('COVID-19 patients', fontsize=14, fontweight='bold')\n",
					"        plt.xlabel('Date', fontsize=14, fontweight='bold')\n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        ax = plt.subplot2grid((6, 4), (2, 2), colspan=2, rowspan=2)\n",
					"        \n",
					"        ax.axis('off')\n",
					"        #ax.axis('tight')\n",
					"\n",
					"        if len(loc) > 12:\n",
					"            loc = loc[:12]\n",
					"            loc = loc + '...'\n",
					"\n",
					"        col_labels = ['All COVID', 'Non-ICU', 'ICU', 'Vent']\n",
					"\n",
					"        \n",
					"        row_labels = fdates.tolist()\n",
					"        row_labels = row_labels[-(ForecastDays):]\n",
					"        total_nc_trunc = total_nc[-(ForecastDays):]\n",
					"        total_cc_trunc = total_cc[-(ForecastDays):]\n",
					"        \n",
					"        table_vals = []\n",
					"        cclr_vals = []\n",
					"        rclr_vals = []\n",
					"        for i in range(len(row_labels)):\n",
					"\n",
					"            cell = [int(np.round(total_nc_trunc[i] + total_cc_trunc[i])), \n",
					"                    int(np.round(total_nc_trunc[i])),\n",
					"                    int(np.round(total_cc_trunc[i])), \n",
					"                    int(np.round(total_cc_trunc[i]*(one_percent*float(per_vent))))]\n",
					"            \n",
					"            if i == 0:\n",
					"                rclr = '0.8'\n",
					"                cclr = ['0.8', '0.8', '0.8', '0.8']\n",
					"            else:\n",
					"                rclr = 'w'\n",
					"                cclr = ['w', 'w', 'w', 'w']\n",
					"            table_vals.append(cell)\n",
					"            cclr_vals.append(cclr)\n",
					"            rclr_vals.append(rclr)\n",
					"            \n",
					"        ncol = 4\n",
					"        the_table = plt.table(cellText=table_vals,\n",
					"                        colWidths=[0.255, 0.255, 0.255, 0.255],\n",
					"                        rowLabels=row_labels,\n",
					"                        colLabels=col_labels,\n",
					"                        cellLoc='center',\n",
					"                        loc='upper center',\n",
					"                        cellColours=cclr_vals,\n",
					"                        rowColours =rclr_vals)\n",
					"        the_table.auto_set_font_size(False)\n",
					"        the_table.set_fontsize(10)\n",
					"        the_table.scale(1, 1.32)\n",
					"        plt.title('Beds needed for COVID-19 cases', fontsize = 16, fontweight = 'bold') \n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        ####################### PPE ##################################\n",
					"        ax = plt.subplot2grid((6, 4), (4, 0), colspan=2, rowspan=2)\n",
					"        \n",
					"        #### Construct arrays for critical care and non-critical care patients\n",
					"        \n",
					"        # All covid patients expected in house on each forecasted day. PUI is just a name here\n",
					"        PUI_COVID = np.array(total_nc) + np.array(total_cc) \n",
					"        # Preparing to add new visits, fraction of new cases visiting your hospital = 0.01 * per_loc \n",
					"        new_visits_your_hospital = new_cases * (one_percent * float(per_loc))\n",
					"        # Add number of new visits to number of in house patients\n",
					"        PUI_COVID = PUI_COVID + new_visits_your_hospital\n",
					"        \n",
					"        glove_surgical = np.round(float(ppe_GLOVE_SURGICAL) * PUI_COVID).astype('int')\n",
					"        glove_nitrile = np.round(float(ppe_GLOVE_EXAM_NITRILE) * PUI_COVID).astype('int')\n",
					"        glove_vinyl = np.round(float(ppe_GLOVE_GLOVE_EXAM_VINYL) * PUI_COVID).astype('int')\n",
					"        face_mask = np.round(float(ppe_MASK_FACE_PROCEDURE_ANTI_FOG) * PUI_COVID).astype('int')\n",
					"        procedure_mask = np.round(float(ppe_MASK_PROCEDURE_FLUID_RESISTANT) * PUI_COVID).astype('int')\n",
					"        isolation_gown = np.round(float(ppe_GOWN_ISOLATION_XLARGE_YELLOW) * PUI_COVID).astype('int')\n",
					"        surgical_mask = np.round(float(ppe_MASK_SURGICAL_ANTI_FOG_W_FILM) * PUI_COVID).astype('int')\n",
					"        face_shield = np.round(float(ppe_SHIELD_FACE_FULL_ANTI_FOG) * PUI_COVID).astype('int')\n",
					"        respirator = np.round(float(ppe_RESPIRATOR_PARTICULATE_FILTER_REG) * PUI_COVID).astype('int')\n",
					"        \n",
					"        #print(len(fdates), len(glove_surgical))\n",
					"        #sys.exit()\n",
					"        \n",
					"        ppe_ls =[[glove_surgical, 'GLOVE SURGICAL', 'r'],\n",
					"             [glove_nitrile, 'GLOVE EXAM NITRILE', 'orange'],\n",
					"             [glove_vinyl, 'GLOVE EXAM VINYL', 'goldenrod'],\n",
					"             [face_mask, 'MASK FACE PROCEDURE ANTI FOG', 'limegreen'],\n",
					"             [procedure_mask, 'MASK PROCEDURE FLUID RESISTANT', 'green'],\n",
					"             [isolation_gown, 'GOWN ISOLATION XLARGE YELLOW', 'cornflowerblue'],\n",
					"             [surgical_mask, 'MASK SURGICAL ANTI FOG W/FILM', 'blue'],\n",
					"             [face_shield, 'SHIELD FACE FULL ANTI FOG', 'plum'],\n",
					"             [respirator, 'RESPIRATOR PARTICULATE FILTER REG', 'darkviolet']]\n",
					"        \n",
					"        linestyles = ['dashed', 'dotted', 'dashdot', \n",
					"                      'dashed', 'dotted', 'dashdot',\n",
					"                      'dotted', 'dashed', 'dashdot']\n",
					"        \n",
					"        for i, ppe in enumerate(ppe_ls):\n",
					"            plt.plot(fdates, ppe[0], c=ppe[2], label=ppe[1], linewidth=2, ls=linestyles[i])\n",
					"    \n",
					"        plt.title('Forecasted PPE needs', fontsize = 16, fontweight = 'bold')\n",
					"        #if log_scl == True:\n",
					"        #    plt.yscale('log')\n",
					"        \n",
					"        for label in ax.xaxis.get_ticklabels()[::8]:\n",
					"            label.set_visible(False)\n",
					"\n",
					"        ax = plt.gca()\n",
					"        temp = ax.xaxis.get_ticklabels()\n",
					"        temp = list(set(temp) - set(temp[::8]))\n",
					"        for label in temp:\n",
					"            label.set_visible(False)\n",
					"            \n",
					"        leg = ax.legend(handlelength=0, handletextpad=0, fancybox=True,\n",
					"                        loc='best', frameon=True, fontsize=8)\n",
					"\n",
					"        for line,text in zip(leg.get_lines(), leg.get_texts()):\n",
					"            text.set_color(line.get_color())\n",
					"\n",
					"        for item in leg.legendHandles: \n",
					"            item.set_visible(False)\n",
					"        \n",
					"        plt.ylabel('PPE Supplies', fontsize=14, fontweight='bold')\n",
					"        plt.xlabel('Date', fontsize=14, fontweight='bold')\n",
					"        if log_scl == True:\n",
					"            plt.yscale('log')\n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        \n",
					"        ax = plt.subplot2grid((6, 4), (4, 2), colspan=2, rowspan=2)\n",
					"        ax.axis('off')\n",
					"        #ax.axis('tight')\n",
					"        \n",
					"        #### Construct arrays for critical care and non-critical care patients\n",
					"        #PUI_COVID = np.array(total_nc) + np.array(total_cc)\n",
					"        PUI_COVID = PUI_COVID[-(ForecastDays):]\n",
					"        \n",
					"        glove_surgical = np.round(float(ppe_GLOVE_SURGICAL) * PUI_COVID).astype('int')\n",
					"        glove_nitrile = np.round(float(ppe_GLOVE_EXAM_NITRILE) * PUI_COVID).astype('int')\n",
					"        glove_vinyl = np.round(float(ppe_GLOVE_GLOVE_EXAM_VINYL) * PUI_COVID).astype('int')\n",
					"        face_mask = np.round(float(ppe_MASK_FACE_PROCEDURE_ANTI_FOG) * PUI_COVID).astype('int')\n",
					"        procedure_mask = np.round(float(ppe_MASK_PROCEDURE_FLUID_RESISTANT) * PUI_COVID).astype('int')\n",
					"        isolation_gown = np.round(float(ppe_GOWN_ISOLATION_XLARGE_YELLOW) * PUI_COVID).astype('int')\n",
					"        surgical_mask = np.round(float(ppe_MASK_SURGICAL_ANTI_FOG_W_FILM) * PUI_COVID).astype('int')\n",
					"        face_shield = np.round(float(ppe_SHIELD_FACE_FULL_ANTI_FOG) * PUI_COVID).astype('int')\n",
					"        respirator = np.round(float(ppe_RESPIRATOR_PARTICULATE_FILTER_REG) * PUI_COVID).astype('int')\n",
					"        \n",
					"        #print(len(fdates), len(glove_surgical))\n",
					"        #sys.exit()\n",
					"        \n",
					"        ppe_ls =[[glove_surgical, 'GLOVE SURGICAL', 'r'],\n",
					"             [glove_nitrile, 'GLOVE EXAM NITRILE', 'orange'],\n",
					"             [glove_vinyl, 'GLOVE EXAM VINYL', 'goldenrod'],\n",
					"             [face_mask, 'MASK FACE PROCEDURE ANTI FOG', 'limegreen'],\n",
					"             [procedure_mask, 'MASK PROCEDURE FLUID RESISTANT', 'green'],\n",
					"             [isolation_gown, 'GOWN ISOLATION XLARGE YELLOW', 'cornflowerblue'],\n",
					"             [surgical_mask, 'MASK SURGICAL ANTI FOG W/FILM', 'blue'],\n",
					"             [face_shield, 'SHIELD FACE FULL ANTI FOG', 'plum'],\n",
					"             [respirator, 'RESPIRATOR PARTICULATE FILTER REG', 'darkviolet']]\n",
					"        \n",
					"        \n",
					"        if len(loc) > 12:\n",
					"            loc = loc[:12]\n",
					"            loc = loc + '...'\n",
					"\n",
					"        col_labels = [ppe_ls[0][1], ppe_ls[1][1], ppe_ls[2][1], \n",
					"                      ppe_ls[3][1], ppe_ls[4][1], ppe_ls[5][1],\n",
					"                      ppe_ls[6][1], ppe_ls[7][1], ppe_ls[8][1]]\n",
					"\n",
					"        row_labels = fdates.tolist()        \n",
					"        row_labels = row_labels[-(ForecastDays):]\n",
					"        \n",
					"        table_vals = []\n",
					"        cclr_vals = []\n",
					"        rclr_vals = []\n",
					"        for i in range(len(row_labels)):\n",
					"\n",
					"            cell = [ppe_ls[0][0][i], ppe_ls[1][0][i], ppe_ls[2][0][i], \n",
					"                      ppe_ls[3][0][i], ppe_ls[4][0][i], ppe_ls[5][0][i],\n",
					"                      ppe_ls[6][0][i], ppe_ls[7][0][i], ppe_ls[8][0][i]]\n",
					"            \n",
					"            if i == 0:\n",
					"                rclr = '0.8'\n",
					"                cclr = ['0.8', '0.8', '0.8', '0.8', '0.8', '0.8', '0.8', '0.8', '0.8']\n",
					"            else:\n",
					"                rclr = 'w'\n",
					"                cclr = ['w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w']\n",
					"                \n",
					"            table_vals.append(cell)\n",
					"            cclr_vals.append(cclr)\n",
					"            rclr_vals.append(rclr)\n",
					"            \n",
					"        ncol = 9\n",
					"        the_table = plt.table(cellText=table_vals,\n",
					"                        colWidths=[0.15]*9,\n",
					"                        rowLabels=row_labels,\n",
					"                        colLabels=None,\n",
					"                        cellLoc='center',\n",
					"                        loc='upper center',\n",
					"                        cellColours=cclr_vals,\n",
					"                        rowColours =rclr_vals)\n",
					"        \n",
					"        the_table.auto_set_font_size(False)\n",
					"        the_table.set_fontsize(10)\n",
					"        the_table.scale(1, 1.32)\n",
					"        \n",
					"        for i in range(len(ppe_ls)):\n",
					"            clr = ppe_ls[i][2]\n",
					"            for j in range(len(row_labels)):\n",
					"                the_table[(j, i)].get_text().set_color(clr)\n",
					"        \n",
					"        hoffset = -0.4 #find this number from trial and error\n",
					"        voffset = 1.0 #find this number from trial and error\n",
					"        col_width = [0.06, 0.09, 0.09, 0.12, 0.133, 0.138, 0.128, 0.135, 0.142]\n",
					"        \n",
					"        col_labels2 =[['GLOVE SURGICAL', 'r'],\n",
					"             ['GLOVE EXAM NITRILE', 'orange'],\n",
					"             ['GLOVE GLOVE EXAM VINYL', 'goldenrod'],\n",
					"             ['MASK FACE PROC. A-FOG', 'limegreen'],\n",
					"             ['MASK PROC. FLUID RES.', 'green'],\n",
					"             ['GOWN ISO. XL YELLOW', 'cornflowerblue'],\n",
					"             ['MASK SURG. ANTI FOG W/FILM', 'blue'],\n",
					"             ['SHIELD FACE FULL ANTI FOG', 'plum'],\n",
					"             ['RESP. PART. FILTER REG', 'darkviolet']]\n",
					"        \n",
					"        count=0\n",
					"        for i, val in enumerate(col_labels2):\n",
					"            ax.annotate('  '+val[0], xy=(hoffset + count * col_width[i], voffset),\n",
					"            xycoords='axes fraction', ha='left', va='bottom', \n",
					"            rotation=-25, size=8, color=val[1])\n",
					"            count+=1\n",
					"        \n",
					"        plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=1.1, hspace=1.1)"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "ce536437-95fc-4f28-996d-b7948a20c539"
					}
				},
				"source": [
					"\n",
					"data = [['logistic'], ['exponential'], ['polynomial']] \n",
					"  \n",
					"# Create the pandas DataFrame \n",
					"df_model = pd.DataFrame(data, columns = ['model']) \n",
					"df_model = df_model['model']\n",
					"model = list(set(df_model))\n",
					""
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "d3a86103-cdc5-4508-a23f-5daa7a808aa7"
					}
				},
				"source": [
					"data = [['yes'], ['no']]\n",
					"  \n",
					"# Create the pandas DataFrame \n",
					"df_logscale = pd.DataFrame(data, columns = ['log']) \n",
					"df_logscale = df_logscale['log']\n",
					"logscale = list(set(df_logscale))"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "c7646339-9d7f-4c80-b512-13e6028b467f"
					}
				},
				"source": [
					"df = pd.read_csv('COVID-CASES-DF.txt', sep='\\t')\n",
					"\n",
					"exportDf = spark.createDataFrame(df)   \n",
					"    \n",
					"exportDf.write.format(\"jdbc\").option(\"url\", \"jdbc:sqlserver://eduusdevpoc.database.windows.net:1433\").option(\"driver\", \"com.microsoft.sqlserver.jdbc.SQLServerDriver\").option(\"database\",\"AnonimizeData\").option(\"dbtable\", \"rushMedical\").option(\"user\", \"mainuser\").option(\"password\", \"#Welcome2018#\").save()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "0ac63c8f-d0a8-4353-8875-906051dbbae9"
					}
				},
				"source": [
					"\n",
					"\n",
					"df = df[df['Country/Region'] == 'US']\n",
					"df= df['Province/State']\n",
					"locations = list(set(df))\n",
					"locations.sort()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "18bb03e2-3042-4bf7-8d78-6460e9e27f51"
					}
				},
				"source": [
					"dbutils.widgets.removeAll()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "efe6d6ce-8121-4ab6-8593-da3940f852fe"
					}
				},
				"source": [
					"dbutils.widgets.dropdown(\"log_scl\", \"yes\", logscale,\"0. Log scale:\")\n",
					"dbutils.widgets.dropdown(\"model\", \"exponential\", model,\"a. model to fit:\")\n",
					"dbutils.widgets.dropdown(\"focal_loc\", \"Illinois\", locations,\"b. Location:\")\n",
					"dbutils.widgets.dropdown(\"per_loc\", \"10\", [str(x) for x in range(1, 100)],\"c. % Visiting your hospital:\")\n",
					"dbutils.widgets.dropdown(\"LOS_nc\", \"1\",  [str(x) for x in range(1, 181)],\"c. LOS (non-critical care):\")\n",
					"dbutils.widgets.dropdown(\"ppe_GLOVE_SURGICAL\", \"1\",  [str(x) for x in range(1, 1000)],\"d. GLOVE SURGICAL:\")\n",
					"dbutils.widgets.dropdown(\"ppe_MASK_FACE_PROCEDURE_ANTI_FOG\", \"1\",  [str(x) for x in range(1, 1000)],\"e. MASK FACE PROC. ANTI FOG:\")\n",
					"dbutils.widgets.dropdown(\"ppe_MASK_SURGICAL_ANTI_FOG_W_FILM\", \"1\",  [str(x) for x in range(1, 1000)],\"f. MASK SURG. ANTI FOG W/FILM:\")\n",
					"dbutils.widgets.dropdown(\"ForecastDays\", \"10\",  [str(x) for x in range(1, 30)],\"g. Forecast length (days):\")\n",
					"dbutils.widgets.dropdown(\"per_admit\", \"30\",  [str(x) for x in range(1, 100)],\"h. % Admitted to your hospital:\")\n",
					"dbutils.widgets.dropdown(\"LOS_cc\", \"1\",  [str(x) for x in range(1, 180)],\"i. LOS (critical care):\")\n",
					"dbutils.widgets.dropdown(\"ppe_GLOVE_EXAM_NITRILE\", \"1\",  [str(x) for x in range(1, 1000)],\"j. GLOVE EXAM NITRILE:\")\n",
					"dbutils.widgets.dropdown(\"ppe_MASK_PROCEDURE_FLUID_RESISTANT\", \"1\",  [str(x) for x in range(1, 1000)],\"k. MASK PROC. FLUID RESISTANT:\")\n",
					"dbutils.widgets.dropdown(\"ppe_SHIELD_FACE_FULL_ANTI_FOG\", \"1\",  [str(x) for x in range(1, 1000)],\"l. SHIELD FACE FULL ANTI FOG:\")\n",
					"dbutils.widgets.dropdown(\"per_cc\", \"60\",  [str(x) for x in range(1, 100)],\"m. % Admitted to critical care:\")\n",
					"dbutils.widgets.dropdown(\"per_vent\", \"60\",  [str(x) for x in range(1, 100)],\"n. % ICU on vent:\")\n",
					"dbutils.widgets.dropdown(\"ppe_GLOVE_GLOVE_EXAM_VINYL\", \"10\",  [str(x) for x in range(1, 100)],\"o. GLOVE EXAM VINYL:\")\n",
					"dbutils.widgets.dropdown(\"ppe_GOWN_ISOLATION_XLARGE_YELLOW\", \"2\",  [str(x) for x in range(1, 100)],\"p. GOWN ISOLATION XL YELLOW:\")\n",
					"dbutils.widgets.dropdown(\"ppe_RESPIRATOR_PARTICULATE_FILTER_REG\", \"11\",  [str(x) for x in range(1, 100)],\"q. RESP. PART. FILTER REG:\")"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "53f6bf6b-8d2d-4eba-b82d-ca0ad888c1c5"
					}
				},
				"source": [
					" %matplotlib inline\n",
					"df = pd.read_csv('COVID-CASES-DF.txt', sep='\\t')\n",
					"\n",
					"_get_fit(df, dbutils.widgets.get(\"model\"),  dbutils.widgets.get(\"focal_loc\"), dbutils.widgets.get(\"per_loc\"), dbutils.widgets.get(\"per_admit\"), dbutils.widgets.get(\"per_cc\"), dbutils.widgets.get(\"LOS_cc\"), dbutils.widgets.get(\"LOS_nc\"), dbutils.widgets.get(\"per_vent\"), dbutils.widgets.get(\"log_scl\"),\n",
					"                        dbutils.widgets.get(\"ppe_GLOVE_SURGICAL\"), dbutils.widgets.get(\"ppe_GLOVE_EXAM_NITRILE\"), dbutils.widgets.get(\"ppe_GLOVE_GLOVE_EXAM_VINYL\"),\n",
					"                        dbutils.widgets.get(\"ppe_MASK_FACE_PROCEDURE_ANTI_FOG\"), dbutils.widgets.get(\"ppe_MASK_PROCEDURE_FLUID_RESISTANT\"), \n",
					"                         dbutils.widgets.get(\"ppe_GOWN_ISOLATION_XLARGE_YELLOW\"), dbutils.widgets.get(\"ppe_MASK_SURGICAL_ANTI_FOG_W_FILM\"),\n",
					"                        dbutils.widgets.get(\"ppe_SHIELD_FACE_FULL_ANTI_FOG\"), dbutils.widgets.get(\"ppe_RESPIRATOR_PARTICULATE_FILTER_REG\"),\n",
					"                        dbutils.widgets.get(\"ForecastDays\"))"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "6749cf4b-00b2-48bc-aae6-756393e4c7c1"
					}
				},
				"source": [
					"%matplotlib inline\n",
					"\n",
					"model=  dbutils.widgets.get(\"model\")\n",
					"focal_loc = dbutils.widgets.get(\"focal_loc\")\n",
					"per_loc= dbutils.widgets.get(\"per_loc\")\n",
					"per_admit= dbutils.widgets.get(\"per_admit\")\n",
					"per_cc = dbutils.widgets.get(\"per_cc\")\n",
					"LOS_cc = dbutils.widgets.get(\"LOS_cc\")\n",
					"LOS_nc = dbutils.widgets.get(\"LOS_nc\")\n",
					"per_vent = dbutils.widgets.get(\"per_vent\")\n",
					"log_scl = dbutils.widgets.get(\"log_scl\")\n",
					"ppe_GLOVE_SURGICAL= dbutils.widgets.get(\"ppe_GLOVE_SURGICAL\")\n",
					"ppe_GLOVE_EXAM_NITRILE= dbutils.widgets.get(\"ppe_GLOVE_EXAM_NITRILE\")\n",
					"ppe_GLOVE_GLOVE_EXAM_VINYL= dbutils.widgets.get(\"ppe_GLOVE_GLOVE_EXAM_VINYL\")\n",
					"ppe_MASK_FACE_PROCEDURE_ANTI_FOG = dbutils.widgets.get(\"ppe_MASK_FACE_PROCEDURE_ANTI_FOG\")\n",
					"ppe_MASK_PROCEDURE_FLUID_RESISTANT= dbutils.widgets.get(\"ppe_MASK_PROCEDURE_FLUID_RESISTANT\") \n",
					"ppe_GOWN_ISOLATION_XLARGE_YELLOW = dbutils.widgets.get(\"ppe_GOWN_ISOLATION_XLARGE_YELLOW\")\n",
					"ppe_MASK_SURGICAL_ANTI_FOG_W_FILM = dbutils.widgets.get(\"ppe_MASK_SURGICAL_ANTI_FOG_W_FILM\")\n",
					"ppe_SHIELD_FACE_FULL_ANTI_FOG = dbutils.widgets.get(\"ppe_SHIELD_FACE_FULL_ANTI_FOG\")\n",
					"ppe_RESPIRATOR_PARTICULATE_FILTER_REG = dbutils.widgets.get(\"ppe_RESPIRATOR_PARTICULATE_FILTER_REG\")\n",
					"forecastDays = dbutils.widgets.get(\"ForecastDays\")\n",
					"      \n",
					"global Forecasted_cases_df_for_download\n",
					"ForecastDays = int(forecastDays)+int(1) #int(ForecastDays+1)\n",
					"        \n",
					"fig = plt.figure(figsize=(11, 17))\n",
					"ax = plt.subplot2grid((6, 4), (0, 0), colspan=2, rowspan=2)        \n",
					"        \n",
					"df_sub = df[df['type'] == 'Confirmed']\n",
					"df_sub = df_sub[df_sub['Province/State'] == focal_loc]\n",
					"df_sub = df_sub.loc[:, (df_sub != 0).any(axis=0)]\n",
					"yi = list(df_sub)\n",
					"\n",
					"clrs =  ['mistyrose', 'pink', 'lightcoral', 'salmon', 'red']\n",
					"clrs2 = ['powderblue', 'lightskyblue', 'cornflowerblue', 'dodgerblue', 'blue']\n",
					"\n",
					"for i, j in enumerate([-4,-3,-2,-1, 0]):\n",
					"\tif j == 0:\n",
					"\t\tDATES = yi[6:]\n",
					"\t\tfocal = df_sub.iloc[0,6:].values\n",
					"\telse:\n",
					"\t\tDATES = yi[6:j]\n",
					"\t\tfocal = df_sub.iloc[0,6:j].values\n",
					"\t\n",
					"\ty = []\n",
					"\tdates = []\n",
					"\tfor ii, val in enumerate(focal):\n",
					"\t\tif len(y) > 0 or val > 0:\n",
					"\t\t\ty.append(val)\n",
					"\t\t\tdates.append(DATES[ii])\n",
					"\n",
					"\tx = list(range(len(y)))\n",
					"\n",
					"\tobs_pred_r2_G, model_G, loc_G, obs_x_G, pred_y_G, forecasted_x_G, forecasted_y_G = fit_curve(x, y, model, df_sub, ForecastDays)\n",
					"\tobs_y_G = np.array(list(y))\n",
					"\n",
					"\tif obs_pred_r2_G < 0:\n",
					"\t\tobs_pred_r2_G = 0.0\n",
					"\n",
					"\ty = np.array(y)\n",
					"\ty[y < 0] = 0\n",
					"\tpred_y_G = np.array(pred_y_G)\n",
					"\tpred_y_G[pred_y_G < 0] = 0\n",
					"\n",
					"\tforecasted_y_G = np.array(forecasted_y_G)\n",
					"\tforecasted_y_G[forecasted_y_G < 0] = 0\n",
					"\tforecast_vals = np.copy(forecasted_y_G)\n",
					"\n",
					"\tnumdays = len(forecasted_x_G)\n",
					"\tlatest_date = pd.to_datetime(dates[-1])\n",
					"\tfirst_date = pd.to_datetime(dates[0])\n",
					"\n",
					"\tfuture_date = latest_date + datetime.timedelta(days = ForecastDays-1)\n",
					"\tfdates = pd.date_range(start=first_date, end=future_date)\n",
					"\tfdates = fdates.strftime('%m/%d')\n",
					"\t\n",
					"\tdo = -j\n",
					"\tif do == 0:\n",
					"\t\tlabel='Current forecast'\n",
					"\t\tlw = 3\n",
					"\telse:\n",
					"\t\tlabel = str(do)+' day old forecast'\n",
					"\t\tlw = 3\n",
					"\t\n",
					"\tplt.plot(fdates, forecasted_y_G, c=clrs[i], linewidth=lw, label=label)\n",
					"\t\n",
					"\tlatest_date = pd.to_datetime(dates[-1])\n",
					"\tfirst_date = pd.to_datetime(dates[0])\n",
					"\tdates = pd.date_range(start=first_date, end=latest_date)\n",
					"\tdates = dates.strftime('%m/%d')\n",
					"\tplt.plot(dates, pred_y_G, c=clrs2[i], linewidth=lw)\n",
					"\tplt.scatter(dates, y, c='0.2', s=100, alpha=0.8, linewidths=0.1)\n",
					"\t\n",
					"\t\n",
					"forecast_vals = forecast_vals.tolist()\n",
					"\n",
					"new_cases = []\n",
					"for i, val in enumerate(forecast_vals):\n",
					"\tif i > 0:\n",
					"\t\tnew_cases.append(forecast_vals[i] - forecast_vals[i-1])\n",
					"\tif i == 0:\n",
					"\t\tnew_cases.append(forecast_vals[i])\n",
					"\n",
					"\n",
					"leg = ax.legend(handlelength=0, handletextpad=0, fancybox=False,\n",
					"\t\t\t\tloc='best', frameon=False, fontsize=14)\n",
					"\n",
					"for line,text in zip(leg.get_lines(), leg.get_texts()):\n",
					"\ttext.set_color(line.get_color())\n",
					"\n",
					"for item in leg.legendHandles: \n",
					"\titem.set_visible(False)\n",
					"\n",
					"plt.xticks(rotation=35, ha='center')\n",
					"plt.xlabel('Date', fontsize=14, fontweight='bold')\n",
					"plt.ylabel('Confirmed cases', fontsize=14, fontweight='bold')\n",
					"\n",
					"if log_scl == True:\n",
					"\tplt.yscale('log')\n",
					"\n",
					"if len(forecasted_x_G) < 10:\n",
					"\ti = 1\n",
					"elif len(forecasted_x_G) < 20:\n",
					"\ti = 4\n",
					"elif len(forecasted_x_G) < 40:\n",
					"\ti = 6\n",
					"else:\n",
					"\ti = 8\n",
					"\n",
					"for label in ax.xaxis.get_ticklabels()[::i]:\n",
					"\tlabel.set_visible(False)\n",
					"\n",
					"ax = plt.gca()\n",
					"temp = ax.xaxis.get_ticklabels()\n",
					"temp = list(set(temp) - set(temp[::i]))\n",
					"for label in temp:\n",
					"\tlabel.set_visible(False)\n",
					"\t\n",
					"plt.title('Model fitting, current ' + r'$r^{2}$' + ' = ' + str(np.round(obs_pred_r2_G, 2)), fontsize = 16, fontweight = 'bold')\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"ax = plt.subplot2grid((6, 4), (0, 2), colspan=2, rowspan=2)\n",
					"ax.axis('off')\n",
					"#ax.axis('tight')\n",
					"\n",
					"loc = str(focal_loc)\n",
					"if len(loc) > 12:\n",
					"\tloc = loc[:12]\n",
					"\tloc = loc + '...'\n",
					"\n",
					"col_labels = ['Cumulative', 'New', 'Your hospital', 'Admitted']\n",
					"\n",
					"row_labels = fdates.tolist()\n",
					"new_cases = np.round(new_cases, 1)\n",
					"\n",
					"\n",
					"row_labels = row_labels[-(ForecastDays):]\n",
					"new_cases2 = new_cases[ -(ForecastDays):]\n",
					"sub_f = forecasted_y_G[ -(ForecastDays):]\n",
					"\n",
					"table_vals = []\n",
					"cclr_vals = []\n",
					"rclr_vals = []\n",
					"\n",
					"Forecasted_cases_df_for_download = pd.DataFrame(columns = ['date'] + col_labels)\n",
					"for i in range(len(row_labels)):\n",
					"\n",
					"\tone_percent = float(0.01)\n",
					"\tval = new_cases2[i]\n",
					"\tcell = [int(np.round(sub_f[i])), \n",
					"\t\t\tint(np.round(val)), \n",
					"\t\t\tint(np.round(val * (float(per_loc) * one_percent))),\n",
					"\t\t\tint(np.round((one_percent * float(per_admit)) * val * (float(per_loc) * one_percent)))]\n",
					"\t\n",
					"\tdf_row = [row_labels[i]]\n",
					"\tdf_row.extend(cell)\n",
					"\t\n",
					"\t#print(df_row)\n",
					"\t#sys.exit()\n",
					"\t\n",
					"\tlabs = ['date'] + col_labels\n",
					"\ttemp = pd.DataFrame([df_row], columns=labs)\n",
					"\t#sys.exit()\n",
					"\tForecasted_cases_df_for_download = pd.concat([Forecasted_cases_df_for_download, temp])\n",
					"\t\n",
					"\t\n",
					"\tif i == 0:\n",
					"\t\trclr = '0.8'\n",
					"\t\tcclr = ['0.8', '0.8', '0.8', '0.8']\n",
					"\telse:\n",
					"\t\trclr = 'w'\n",
					"\t\tcclr = ['w', 'w', 'w', 'w']\n",
					"\ttable_vals.append(cell)\n",
					"\tcclr_vals.append(cclr)\n",
					"\trclr_vals.append(rclr)\n",
					"\n",
					"ncol = 4\n",
					"the_table = plt.table(cellText=table_vals,\n",
					"\t\t\t\tcolWidths=[0.26] * ncol,\n",
					"\t\t\t\trowLabels=row_labels,\n",
					"\t\t\t\tcolLabels=col_labels,\n",
					"\t\t\t\tcellLoc='center',\n",
					"\t\t\t\tloc='upper center',\n",
					"\t\t\t\tcellColours=cclr_vals,\n",
					"\t\t\t\trowColours =rclr_vals)\n",
					"the_table.auto_set_font_size(False)\n",
					"the_table.set_fontsize(10)\n",
					"the_table.scale(1, 1.32)\n",
					"plt.title('Forecasted cases for '+ loc, fontsize = 16, fontweight = 'bold')\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"ax = plt.subplot2grid((6, 4), (2, 0), colspan=2, rowspan=2)\n",
					"\n",
					"#### Construct arrays for critical care and non-critical care patients\n",
					"cc = (one_percent * float(per_cc)) * (one_percent * float(per_admit)) * (one_percent * float(per_loc)) * np.array(new_cases)\n",
					"cc = cc.tolist()\n",
					"\n",
					"\n",
					"nc = (1 - (one_percent * float(per_cc))) * (one_percent * float(per_admit) ) * (one_percent * float(per_loc)) * np.array(new_cases)\n",
					"nc = nc.tolist()\n",
					"\n",
					"# LOS for non critical care = 5 days\n",
					"# LOS for critical care = 10 days\n",
					"p = float(0.5)\n",
					"n_cc = float(LOS_cc)*2\n",
					"n_nc = float(LOS_nc)*2\n",
					"\n",
					"rv_nc = binom(n_nc, p)\n",
					"p_nc = rv_nc.cdf(np.array(range(1, len(fdates)+1)))\n",
					"\n",
					"rv_cc = binom(n_cc, p)\n",
					"p_cc = rv_cc.cdf(np.array(range(1, len(fdates)+1)))\n",
					"\n",
					"LOScc = np.zeros(len(fdates))\n",
					"LOScc[0] = new_cases[0] * (one_percent * float(per_cc)) * (one_percent * float(per_admit)) * (one_percent * float(per_loc))\n",
					"LOSnc = np.zeros(len(fdates))\n",
					"LOSnc[0] =  new_cases[0] * (1-(one_percent * float(per_cc))) * (one_percent * float(per_admit)) * (one_percent * float(per_loc))\n",
					"\n",
					"\n",
					"total_nc = []\n",
					"total_cc = []\n",
					"\n",
					"\n",
					"for i, day in enumerate(fdates):\n",
					"\tLOScc = LOScc * (1 - p_cc)\n",
					"\tLOSnc = LOSnc * (1 - p_nc)\n",
					"\t\n",
					"\tLOScc = np.roll(LOScc, shift=1)\n",
					"\tLOSnc = np.roll(LOSnc, shift=1)\n",
					"\t\n",
					"\tLOScc[0] = new_cases[i] * (one_percent * float(per_cc)) * (one_percent * float(per_admit)) * (one_percent * float(per_loc))\n",
					"\tLOSnc[0] = new_cases[i] * (1 - (one_percent * float(per_cc))) * (one_percent * float(per_admit)) * (one_percent * float(per_loc))\n",
					"\n",
					"\ttotal_nc.append(np.sum(LOSnc))\n",
					"\ttotal_cc.append(np.sum(LOScc))\n",
					"\t#print(day, '  :  ', np.round(LOScc, 0), '  :  ', sum(np.round(LOScc, 0)), '\\n')\n",
					"\t\n",
					"\n",
					"plt.plot(fdates, total_cc, c='Crimson', label='Critical care', linewidth=3)\n",
					"plt.plot(fdates, total_nc, c='0.3', label='Non-critical care', linewidth=3)\n",
					"plt.title('Forecasted census', fontsize = 16, fontweight = 'bold')\n",
					"if log_scl == True:\n",
					"\tplt.yscale('log')\n",
					"\n",
					"for label in ax.xaxis.get_ticklabels()[::8]:\n",
					"\tlabel.set_visible(False)\n",
					"\n",
					"ax = plt.gca()\n",
					"temp = ax.xaxis.get_ticklabels()\n",
					"temp = list(set(temp) - set(temp[::8]))\n",
					"for label in temp:\n",
					"\tlabel.set_visible(False)\n",
					"\t\n",
					"leg = ax.legend(handlelength=0, handletextpad=0, fancybox=False,\n",
					"\t\t\t\tloc='best', frameon=False, fontsize=14)\n",
					"\n",
					"for line,text in zip(leg.get_lines(), leg.get_texts()):\n",
					"\ttext.set_color(line.get_color())\n",
					"\n",
					"for item in leg.legendHandles: \n",
					"\titem.set_visible(False)\n",
					"\n",
					"plt.ylabel('COVID-19 patients', fontsize=14, fontweight='bold')\n",
					"plt.xlabel('Date', fontsize=14, fontweight='bold')\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"ax = plt.subplot2grid((6, 4), (2, 2), colspan=2, rowspan=2)\n",
					"\n",
					"ax.axis('off')\n",
					"#ax.axis('tight')\n",
					"\n",
					"if len(loc) > 12:\n",
					"\tloc = loc[:12]\n",
					"\tloc = loc + '...'\n",
					"\n",
					"col_labels = ['All COVID', 'Non-ICU', 'ICU', 'Vent']\n",
					"\n",
					"\n",
					"row_labels = fdates.tolist()\n",
					"row_labels = row_labels[-(ForecastDays):]\n",
					"total_nc_trunc = total_nc[-(ForecastDays):]\n",
					"total_cc_trunc = total_cc[-(ForecastDays):]\n",
					"\n",
					"table_vals = []\n",
					"cclr_vals = []\n",
					"rclr_vals = []\n",
					"for i in range(len(row_labels)):\n",
					"\n",
					"\tcell = [int(np.round(total_nc_trunc[i] + total_cc_trunc[i])), \n",
					"\t\t\tint(np.round(total_nc_trunc[i])),\n",
					"\t\t\tint(np.round(total_cc_trunc[i])), \n",
					"\t\t\tint(np.round(total_cc_trunc[i]*(one_percent*float(per_vent))))]\n",
					"\t\n",
					"\tif i == 0:\n",
					"\t\trclr = '0.8'\n",
					"\t\tcclr = ['0.8', '0.8', '0.8', '0.8']\n",
					"\telse:\n",
					"\t\trclr = 'w'\n",
					"\t\tcclr = ['w', 'w', 'w', 'w']\n",
					"\ttable_vals.append(cell)\n",
					"\tcclr_vals.append(cclr)\n",
					"\trclr_vals.append(rclr)\n",
					"\t\n",
					"ncol = 4\n",
					"the_table = plt.table(cellText=table_vals,\n",
					"\t\t\t\tcolWidths=[0.255, 0.255, 0.255, 0.255],\n",
					"\t\t\t\trowLabels=row_labels,\n",
					"\t\t\t\tcolLabels=col_labels,\n",
					"\t\t\t\tcellLoc='center',\n",
					"\t\t\t\tloc='upper center',\n",
					"\t\t\t\tcellColours=cclr_vals,\n",
					"\t\t\t\trowColours =rclr_vals)\n",
					"the_table.auto_set_font_size(False)\n",
					"the_table.set_fontsize(10)\n",
					"the_table.scale(1, 1.32)\n",
					"plt.title('Beds needed for COVID-19 cases', fontsize = 16, fontweight = 'bold') \n",
					"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"####################### PPE ##################################\n",
					"ax = plt.subplot2grid((6, 4), (4, 0), colspan=2, rowspan=2)\n",
					"\n",
					"#### Construct arrays for critical care and non-critical care patients\n",
					"\n",
					"# All covid patients expected in house on each forecasted day. PUI is just a name here\n",
					"PUI_COVID = np.array(total_nc) + np.array(total_cc) \n",
					"# Preparing to add new visits, fraction of new cases visiting your hospital = 0.01 * per_loc \n",
					"new_visits_your_hospital = new_cases * (one_percent * float(per_loc))\n",
					"# Add number of new visits to number of in house patients\n",
					"PUI_COVID = PUI_COVID + new_visits_your_hospital\n",
					"\n",
					"glove_surgical = np.round(float(ppe_GLOVE_SURGICAL) * PUI_COVID).astype('int')\n",
					"glove_nitrile = np.round(float(ppe_GLOVE_EXAM_NITRILE) * PUI_COVID).astype('int')\n",
					"glove_vinyl = np.round(float(ppe_GLOVE_GLOVE_EXAM_VINYL) * PUI_COVID).astype('int')\n",
					"face_mask = np.round(float(ppe_MASK_FACE_PROCEDURE_ANTI_FOG) * PUI_COVID).astype('int')\n",
					"procedure_mask = np.round(float(ppe_MASK_PROCEDURE_FLUID_RESISTANT) * PUI_COVID).astype('int')\n",
					"isolation_gown = np.round(float(ppe_GOWN_ISOLATION_XLARGE_YELLOW) * PUI_COVID).astype('int')\n",
					"surgical_mask = np.round(float(ppe_MASK_SURGICAL_ANTI_FOG_W_FILM) * PUI_COVID).astype('int')\n",
					"face_shield = np.round(float(ppe_SHIELD_FACE_FULL_ANTI_FOG) * PUI_COVID).astype('int')\n",
					"respirator = np.round(float(ppe_RESPIRATOR_PARTICULATE_FILTER_REG) * PUI_COVID).astype('int')\n",
					"\n",
					"#print(len(fdates), len(glove_surgical))\n",
					"#sys.exit()\n",
					"\n",
					"ppe_ls =[[glove_surgical, 'GLOVE SURGICAL', 'r'],\n",
					"\t [glove_nitrile, 'GLOVE EXAM NITRILE', 'orange'],\n",
					"\t [glove_vinyl, 'GLOVE EXAM VINYL', 'goldenrod'],\n",
					"\t [face_mask, 'MASK FACE PROCEDURE ANTI FOG', 'limegreen'],\n",
					"\t [procedure_mask, 'MASK PROCEDURE FLUID RESISTANT', 'green'],\n",
					"\t [isolation_gown, 'GOWN ISOLATION XLARGE YELLOW', 'cornflowerblue'],\n",
					"\t [surgical_mask, 'MASK SURGICAL ANTI FOG W/FILM', 'blue'],\n",
					"\t [face_shield, 'SHIELD FACE FULL ANTI FOG', 'plum'],\n",
					"\t [respirator, 'RESPIRATOR PARTICULATE FILTER REG', 'darkviolet']]\n",
					"\n",
					"linestyles = ['dashed', 'dotted', 'dashdot', \n",
					"\t\t\t  'dashed', 'dotted', 'dashdot',\n",
					"\t\t\t  'dotted', 'dashed', 'dashdot']\n",
					"\n",
					"for i, ppe in enumerate(ppe_ls):\n",
					"\tplt.plot(fdates, ppe[0], c=ppe[2], label=ppe[1], linewidth=2, ls=linestyles[i])\n",
					"\n",
					"plt.title('Forecasted PPE needs', fontsize = 16, fontweight = 'bold')\n",
					"#if log_scl == True:\n",
					"#    plt.yscale('log')\n",
					"\n",
					"for label in ax.xaxis.get_ticklabels()[::8]:\n",
					"\tlabel.set_visible(False)\n",
					"\n",
					"ax = plt.gca()\n",
					"temp = ax.xaxis.get_ticklabels()\n",
					"temp = list(set(temp) - set(temp[::8]))\n",
					"for label in temp:\n",
					"\tlabel.set_visible(False)\n",
					"\t\n",
					"leg = ax.legend(handlelength=0, handletextpad=0, fancybox=True,\n",
					"\t\t\t\tloc='best', frameon=True, fontsize=8)\n",
					"\n",
					"for line,text in zip(leg.get_lines(), leg.get_texts()):\n",
					"\ttext.set_color(line.get_color())\n",
					"\n",
					"for item in leg.legendHandles: \n",
					"\titem.set_visible(False)\n",
					"\n",
					"plt.ylabel('PPE Supplies', fontsize=14, fontweight='bold')\n",
					"plt.xlabel('Date', fontsize=14, fontweight='bold')\n",
					"if log_scl == True:\n",
					"\tplt.yscale('log')\n",
					"\n",
					"ax = plt.subplot2grid((6, 4), (4, 2), colspan=2, rowspan=2)\n",
					"ax.axis('off')\n",
					"#ax.axis('tight')\n",
					"\n",
					"#### Construct arrays for critical care and non-critical care patients\n",
					"#PUI_COVID = np.array(total_nc) + np.array(total_cc)\n",
					"PUI_COVID = PUI_COVID[-(ForecastDays):]\n",
					"\n",
					"glove_surgical = np.round(float(ppe_GLOVE_SURGICAL) * PUI_COVID).astype('int')\n",
					"glove_nitrile = np.round(float(ppe_GLOVE_EXAM_NITRILE) * PUI_COVID).astype('int')\n",
					"glove_vinyl = np.round(float(ppe_GLOVE_GLOVE_EXAM_VINYL) * PUI_COVID).astype('int')\n",
					"face_mask = np.round(float(ppe_MASK_FACE_PROCEDURE_ANTI_FOG) * PUI_COVID).astype('int')\n",
					"procedure_mask = np.round(float(ppe_MASK_PROCEDURE_FLUID_RESISTANT) * PUI_COVID).astype('int')\n",
					"isolation_gown = np.round(float(ppe_GOWN_ISOLATION_XLARGE_YELLOW) * PUI_COVID).astype('int')\n",
					"surgical_mask = np.round(float(ppe_MASK_SURGICAL_ANTI_FOG_W_FILM) * PUI_COVID).astype('int')\n",
					"face_shield = np.round(float(ppe_SHIELD_FACE_FULL_ANTI_FOG) * PUI_COVID).astype('int')\n",
					"respirator = np.round(float(ppe_RESPIRATOR_PARTICULATE_FILTER_REG) * PUI_COVID).astype('int')\n",
					"\n",
					"#print(len(fdates), len(glove_surgical))\n",
					"#sys.exit()\n",
					"\n",
					"ppe_ls =[[glove_surgical, 'GLOVE SURGICAL', 'r'],\n",
					"\t [glove_nitrile, 'GLOVE EXAM NITRILE', 'orange'],\n",
					"\t [glove_vinyl, 'GLOVE EXAM VINYL', 'goldenrod'],\n",
					"\t [face_mask, 'MASK FACE PROCEDURE ANTI FOG', 'limegreen'],\n",
					"\t [procedure_mask, 'MASK PROCEDURE FLUID RESISTANT', 'green'],\n",
					"\t [isolation_gown, 'GOWN ISOLATION XLARGE YELLOW', 'cornflowerblue'],\n",
					"\t [surgical_mask, 'MASK SURGICAL ANTI FOG W/FILM', 'blue'],\n",
					"\t [face_shield, 'SHIELD FACE FULL ANTI FOG', 'plum'],\n",
					"\t [respirator, 'RESPIRATOR PARTICULATE FILTER REG', 'darkviolet']]\n",
					"\n",
					"\n",
					"if len(loc) > 12:\n",
					"\tloc = loc[:12]\n",
					"\tloc = loc + '...'\n",
					"\n",
					"col_labels = [ppe_ls[0][1], ppe_ls[1][1], ppe_ls[2][1], \n",
					"\t\t\t  ppe_ls[3][1], ppe_ls[4][1], ppe_ls[5][1],\n",
					"\t\t\t  ppe_ls[6][1], ppe_ls[7][1], ppe_ls[8][1]]\n",
					"\n",
					"row_labels = fdates.tolist()        \n",
					"row_labels = row_labels[-(ForecastDays):]\n",
					"\n",
					"table_vals = []\n",
					"cclr_vals = []\n",
					"rclr_vals = []\n",
					"for i in range(len(row_labels)):\n",
					"\n",
					"\tcell = [ppe_ls[0][0][i], ppe_ls[1][0][i], ppe_ls[2][0][i], \n",
					"\t\t\t  ppe_ls[3][0][i], ppe_ls[4][0][i], ppe_ls[5][0][i],\n",
					"\t\t\t  ppe_ls[6][0][i], ppe_ls[7][0][i], ppe_ls[8][0][i]]\n",
					"\t\n",
					"\tif i == 0:\n",
					"\t\trclr = '0.8'\n",
					"\t\tcclr = ['0.8', '0.8', '0.8', '0.8', '0.8', '0.8', '0.8', '0.8', '0.8']\n",
					"\telse:\n",
					"\t\trclr = 'w'\n",
					"\t\tcclr = ['w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w']\n",
					"\t\t\n",
					"\ttable_vals.append(cell)\n",
					"\tcclr_vals.append(cclr)\n",
					"\trclr_vals.append(rclr)\n",
					"\t\n",
					"ncol = 9\n",
					"the_table = plt.table(cellText=table_vals,\n",
					"\t\t\t\tcolWidths=[0.15]*9,\n",
					"\t\t\t\trowLabels=row_labels,\n",
					"\t\t\t\tcolLabels=None,\n",
					"\t\t\t\tcellLoc='center',\n",
					"\t\t\t\tloc='upper center',\n",
					"\t\t\t\tcellColours=cclr_vals,\n",
					"\t\t\t\trowColours =rclr_vals)\n",
					"\n",
					"the_table.auto_set_font_size(False)\n",
					"the_table.set_fontsize(10)\n",
					"the_table.scale(1, 1.32)\n",
					"\n",
					"for i in range(len(ppe_ls)):\n",
					"\tclr = ppe_ls[i][2]\n",
					"\tfor j in range(len(row_labels)):\n",
					"\t\tthe_table[(j, i)].get_text().set_color(clr)\n",
					"\n",
					"hoffset = -0.4 #find this number from trial and error\n",
					"voffset = 1.0 #find this number from trial and error\n",
					"col_width = [0.06, 0.09, 0.09, 0.12, 0.133, 0.138, 0.128, 0.135, 0.142]\n",
					"\n",
					"col_labels2 =[['GLOVE SURGICAL', 'r'],\n",
					"\t ['GLOVE EXAM NITRILE', 'orange'],\n",
					"\t ['GLOVE GLOVE EXAM VINYL', 'goldenrod'],\n",
					"\t ['MASK FACE PROC. A-FOG', 'limegreen'],\n",
					"\t ['MASK PROC. FLUID RES.', 'green'],\n",
					"\t ['GOWN ISO. XL YELLOW', 'cornflowerblue'],\n",
					"\t ['MASK SURG. ANTI FOG W/FILM', 'blue'],\n",
					"\t ['SHIELD FACE FULL ANTI FOG', 'plum'],\n",
					"\t ['RESP. PART. FILTER REG', 'darkviolet']]\n",
					"\n",
					"count=0\n",
					"for i, val in enumerate(col_labels2):\n",
					"\tax.annotate('  '+val[0], xy=(hoffset + count * col_width[i], voffset),\n",
					"\txycoords='axes fraction', ha='left', va='bottom', \n",
					"\trotation=-25, size=8, color=val[1])\n",
					"\tcount+=1\n",
					"\n",
					"plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=1.1, hspace=1.1)\n",
					""
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "fac6af5e-6bdc-4c3d-bdd0-0cc78435dc23"
					}
				},
				"source": [
					"#df_cases = pd.read_csv('COVID-CASES-DF.txt', sep='\\t')  \n",
					"#df_cases = df_cases[df_cases['Country/Region'] == 'US']\n",
					"    \n",
					"def create_download_link( df, title, filename):\n",
					"    csv = df.to_csv()\n",
					"    b64 = base64.b64encode(csv.encode())\n",
					"    payload = b64.decode()\n",
					"    html = '<a download=\"{filename}\" href=\"data:text/csv;base64,{payload}\" style=\"left; margin:0px 0px 0px 0px\" size=\"4\" target=\"_blank\">{title}</a>'\n",
					"    html = html.format(payload=payload,title=title,filename=filename)\n",
					"                \n",
					"    return HTML(html)\n",
					"\n",
					"create_download_link(Forecasted_cases_df_for_download, \"Download CSV file of forecasted COVID-19 cases\", \"forecasted_COVID19_cases.csv\")"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "8bf0de27-0337-496b-8e94-7028c2ad34e3"
					}
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": 0
			}
		]
	}
}