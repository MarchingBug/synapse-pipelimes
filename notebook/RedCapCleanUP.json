{
	"name": "RedCapCleanUP",
	"properties": {
		"folder": {
			"name": "Yale"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "NotebookPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6e1d75ef-d2d2-4972-bce6-95e6b5b68575"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/20e228e4-63c7-480a-a860-4b61e9623727/resourceGroups/EDU-US-DevPoc/providers/Microsoft.Synapse/workspaces/educsademo/bigDataPools/NotebookPool",
				"name": "NotebookPool",
				"type": "Spark",
				"endpoint": "https://educsademo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/NotebookPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\n",
					"blob_account_name = \"eduusdevpoc\"\n",
					"blob_container_name = \"yale\"\n",
					"from pyspark.sql import SparkSession\n",
					"\n",
					"sc = SparkSession.builder.getOrCreate()\n",
					"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
					"blob_sas_token = token_library.getConnectionString(\"Source files\")\n",
					"\n",
					"df = spark.read.load('abfss://yalepower@edupocdatalake.dfs.core.windows.net/COPEDatasetDeIDFinal.csv', format='csv',header=True)\n",
					"\n",
					"##display(df.limit(10))"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##df.printSchema()"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import regexp_replace\r\n",
					"\r\n",
					"df = df.withColumn('task_data_auditory_complete',regexp_replace('task_data_auditory_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn( 'task_data_visual_complete',regexp_replace('task_data_visual_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn( 'task_data_auditory_qualifying_complete',regexp_replace('task_data_auditory_qualifying_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn( 'task_data_auditory_qualifying_task_2_complete',regexp_replace('task_data_auditory_qualifying_task_2_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_auditory_qualifying_task_3_complete',regexp_replace('task_data_auditory_qualifying_task_3_complete', r'<[^>]+>', ''))\r\n",
					"df= df.withColumn('task_data_auditory_qualifying_task_4_complete',regexp_replace('task_data_auditory_qualifying_task_4_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying_complete',regexp_replace('task_data_visual_qualifying_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying_task_2_complete',regexp_replace('task_data_visual_qualifying_task_2_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying_task_3_complete',regexp_replace('task_data_visual_qualifying_task_3_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying_task_4_complete',regexp_replace('task_data_visual_qualifying_task_4_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying10_complete',regexp_replace('task_data_visual_qualifying10_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying11_complete',regexp_replace('task_data_visual_qualifying11_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying12_complete',regexp_replace('task_data_visual_qualifying12_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying13_complete',regexp_replace('task_data_visual_qualifying13_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying14_complete',regexp_replace('task_data_visual_qualifying14_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying15_complete',regexp_replace('task_data_visual_qualifying15_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying16_complete',regexp_replace('task_data_visual_qualifying16_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying17_complete',regexp_replace('task_data_visual_qualifying17_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_visual_qualifying18_complete',regexp_replace('task_data_visual_qualifying18_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_auditory_qualifying10_complete',regexp_replace('task_data_auditory_qualifying10_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_auditory_qualifying11_complete',regexp_replace('task_data_auditory_qualifying11_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_auditory_qualifying14_complete',regexp_replace('task_data_auditory_qualifying14_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_auditory_qualifying15_complete',regexp_replace('task_data_auditory_qualifying15_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_auditory_qualifying16_complete',regexp_replace('task_data_auditory_qualifying16_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_auditory_qualifying17_complete',regexp_replace('task_data_auditory_qualifying17_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_auditory_qualifying18_complete',regexp_replace('task_data_auditory_qualifying18_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_auditory_qualifying19_complete',regexp_replace('task_data_auditory_qualifying19_complete', r'<[^>]+>', ''))\r\n",
					"df = df.withColumn('task_data_yanny_laurel_control_complete',regexp_replace('task_data_yanny_laurel_control_complete', r'<[^>]+>', ''))\r\n",
					"\r\n",
					"##display(df.limit(10))"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"filename = \"wasbs://yale@eduusdevpoc.blob.core.windows.net/al_powers_lab_processed/COPEDatasetDeIDFinal.parquet\"           \r\n",
					"df.collect()          \r\n",
					"df.write.parquet(filename)"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"filename = \"abfss://yalepower@edupocdatalake.dfs.core.windows.net/COPEDatasetDeIDFinalCleaned.csv\"\r\n",
					"df.collect()          \r\n",
					"df.write.csv(filename)\r\n",
					"df = spark.read.load(filename, format='csv',header=True)"
				],
				"attachments": null,
				"execution_count": 4
			}
		]
	}
}